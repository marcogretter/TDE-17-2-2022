#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define N 5

/*
Si scriva una funzione che riceve un vettore di liste di interi positivi e la sua
dimensione, e restituisce l’indice della locazione del vettore contenente il
puntatore alla lista per cui è massima la somma degli elementi della lista stessa.
*/

/*
Si scriva una funzione che riceve un vettore di liste di interi positivi e la sua
dimensione, e restituisce la somma delle medie di tutte le liste.
Si supponga per semplicità che non esistano liste vuote e che il vettore sia
correttamente definito.
*/

typedef struct EL {
    int info;
    struct EL * prox;
} ElemLista;

typedef ElemLista * Lista;
typedef Lista VettLista[5];

Lista InsInFondoInt(Lista lista,int elem);
void VisualizzaListaInt(Lista lista);
void VisualizzaVettListaInt(VettLista vett);

void costruisciVett(VettLista v);
Lista costruisciLista(int v[],int lun);
float f(VettLista v,int lun);
float media(Lista lis);
//
// TODO: PROTOTIPI DELLA FUNZIONE RICHIESTA E EVENTUALI FUNZIONI AUSILIARIE
//
int sommaElemLis(Lista lis);
int fu(VettLista vetLis,int grandezzaVet);
typedef struct{
    float vMedie[5];
} medie;
medie fun(VettLista vet,int grandezzaVet);

int main(){
    float ris;
    VettLista vet;
    medie med;
    int i;
    costruisciVett(vet);
    VisualizzaVettListaInt(vet);

    //TODO: invocazione funzione e stampa
    //(in questo esercizio voi dovete stampare solo nel main)
    ris=f(vet,5);
    printf("%f",ris);
    printf("\nL'indice del vettore con la somma degli elementi più grande è: %d\n",fu(vet, 5));
    med=fun(vet, 5);
    for (i=0; i<5; i++) {
        printf("La media della lista di indice %d è: %f.\n",i,med.vMedie[i]);
    }
    return 0;
}

//
// TODO: SVILUPPARE QUI LA FUNZIONI RICHIESTA ED EVENTUALI FUNZIONI RICHIESTE
//
medie fun(VettLista vet,int grandezzaVet)
{
    medie med;
    int i;
    for (i=0; i<grandezzaVet; i++) {
        med.vMedie[i]=media(vet[i]);
    }
    return med;
}
int fu(VettLista vetLis,int grandezzaVet)
{
    int i,SumMag=0,indexMag=0,vero=1;
    for (i=0; i<grandezzaVet; i++) {
        if(vero==1){
            indexMag=0;
            SumMag=sommaElemLis(vetLis[0]);
            vero=3;
        }
        if(SumMag<sommaElemLis(vetLis[i])&&vero!=1){
            indexMag=i;
            SumMag=sommaElemLis(vetLis[i]);
        }
    }
    return indexMag;
}
int sommaElemLis(Lista lis)
{
    int sum=0;
    if(lis==NULL)
        return 0;
    while (lis!=NULL) {
        sum+=lis->info;
        lis=lis->prox;
    }
    return sum;
}

float media(Lista lis){
    int somma=0,cont=0;
    for(;lis!=NULL;lis=lis->prox){
        somma=somma+lis->info;
        cont++;
    }
    return (float)somma/cont;
}

float f(VettLista v,int lun){
    int i;
    float somma;
    somma=media(v[0]);
    for(i=1;i<lun;i++){
        somma=somma+media(v[i]);
    }
    return somma;
}


void costruisciVett(VettLista v){
    int m[N][N*2]={3,7,1,8,3,1,9,1,0,0,
                  1,4,2,4,8,2,0,8,2,7,
                  2,4,6,8,3,0,0,0,0,0,
                  1,6,8,3,8,9,3,0,0,0,
                  4,4,8,1,1,6,0,0,0,0};
    int i,lung[N]={8,10,5,7,6};
    
    for(i=0;i<N;i++)
        v[i]=costruisciLista(m[i],lung[i]);
}

Lista costruisciLista(int v[],int lun){
    Lista lis=NULL;    int i=0;
    for(i=0;i<lun;i++)
        lis=InsInFondoInt(lis,v[i]);
    return lis;
}

Lista InsInFondoInt(Lista lista,int elem){
    Lista punt;
    if(lista==NULL) { punt = (Lista)malloc( sizeof(ElemLista) );
                      punt->prox = NULL; punt->info=elem; return  punt;
    }else{lista->prox = InsInFondoInt(lista->prox,elem); return lista;}
}

void VisualizzaListaInt(Lista lista) {
    if (lista==NULL) printf(" ---| \n");
    else{printf(" %d ---> ", lista->info); VisualizzaListaInt( lista->prox );}
}

void VisualizzaVettListaInt(VettLista vett){
    int i;
    for(i=0;i<N;i++){
        VisualizzaListaInt(vett[i]);
        printf("\n");
    }
}
